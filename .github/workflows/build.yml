name: Build

on: [ push, pull_request ]

jobs:
  build:
    name: ${{ matrix.config.name }} SCALAR_DOUBLE=${{ matrix.scalar_double }}
    runs-on: ${{ matrix.config.os }}
    if: "!contains(github.event.head_commit.message, '[skip ci]')"

    strategy:
      fail-fast: false
      matrix:
        scalar_double: [ "OFF", "ON" ]
        config:
          - {
            name: "Windows MSVC",
            os: windows-latest,
            generator: "Ninja",
            conda_library_dir: "Library",
            compile_qanimation_with_ffmpeg: "OFF",
            compile_qpcl: "OFF",
            compile_qransac: "ON",
          }
          - {
            name: "macOS Clang",
            os: macos-latest,
            generator: "Ninja",
            conda_library_dir: ".",
            compile_qanimation_with_ffmpeg: "OFF",
            compile_qpcl: "OFF",
            compile_qransac: "ON",
          }

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup (Windows)
        if: matrix.config.os == 'windows-latest'
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # Turn off for now since GitHub Actions is broken (will eventually move to brew anyways)
      # - name: Conda Cache (macOS)
      #   if:  matrix.config.os == 'macos-latest'
      #   uses: actions/cache@v3
      #   with:
      #     path: /Users/runner/miniconda3/envs/CloudCompareDev
      #     key: conda-cache-${{ runner.os }}-${{ hashFiles('.ci/conda.yml') }}

      # DGM: caching conda doesn't seem to work properly anymore
      #- name: Conda Cache (Windows)
      #  if: matrix.config.os == 'windows-latest'
      #  uses: actions/cache@v3
      #  with:
      #    path: C:\Miniconda3\envs\CloudCompareDev
      #    key: conda-cache-${{ runner.os }}-${{ hashFiles('.ci/conda.yml') }}

      # DGM: without caching, using conda on Windows takes a long time...
      - name: Install Dependencies
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: CloudCompareDev
          auto-activate-base: false
          environment-file: .ci/conda.yml
          miniconda-version: 'latest'

      - name: Install Dependencies (macOS)
        if: matrix.config.os == 'macos-latest'
        run: brew install xerces-c

      - name: Configure MSVC console (Windows)
        if: matrix.config.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Set environment for MSVC (Windows)
        if: matrix.config.os == 'windows-latest'
        run: |
          # Set these env vars so cmake picks the correct compiler
          # https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-commands-for-github-actions#environment-files
          echo "CXX=cl.exe" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "CC=cl.exe" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Configure CMake
        shell: bash -l {0}
        run: |
          mkdir build

          export CONDA_LIB_DIR="$CONDA_PREFIX/${{ matrix.config.conda_library_dir }}"
          export EIGEN_ROOT_DIR="$CONDA_LIB_DIR/include/eigen3"

          cmake \
            -B build \
            -G "${{ matrix.config.generator }}" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_PREFIX_PATH="$CONDA_LIB_DIR" \
            -DCCCORELIB_SCALAR_DOUBLE=${{ matrix.scalar_double }} \
            -DEIGEN_ROOT_DIR="$EIGEN_ROOT_DIR" \
            -DOPTION_SUPPORT_GAMEPADS=OFF \
            -DPLUGIN_EXAMPLE_GL=OFF \
            -DPLUGIN_EXAMPLE_IO=OFF \
            -DPLUGIN_EXAMPLE_STANDARD=OFF \
            -DPLUGIN_GL_QEDL=OFF \
            -DPLUGIN_GL_QSSAO=OFF \
            -DPLUGIN_IO_QADDITIONAL=OFF \
            -DPLUGIN_IO_QCORE=OFF \
            -DPLUGIN_IO_QE57=ON \
            -DPLUGIN_IO_QPHOTOSCAN=OFF \
            -DPLUGIN_IO_QLAS=ON \
            -DPLUGIN_IO_QRDB=OFF \
            -DPLUGIN_IO_QRDB_FETCH_DEPENDENCY=OFF \
            -DPLUGIN_IO_QRDB_INSTALL_DEPENDENCY=OFF \
            -DPLUGIN_STANDARD_QANIMATION=OFF \
            -DQANIMATION_WITH_FFMPEG_SUPPORT=${{ matrix.config.compile_qanimation_with_ffmpeg }} \
            -DPLUGIN_STANDARD_QBROOM=OFF \
            -DPLUGIN_STANDARD_QCANUPO=OFF \
            -DPLUGIN_STANDARD_QCOMPASS=OFF \
            -DPLUGIN_STANDARD_QCSF=OFF \
            -DPLUGIN_STANDARD_QFACETS=OFF \
            -DPLUGIN_STANDARD_QHOUGH_NORMALS=OFF \
            -DPLUGIN_STANDARD_QHPR=OFF \
            -DPLUGIN_STANDARD_QM3C2=OFF \
            -DPLUGIN_STANDARD_QPCV=OFF \
            -DPLUGIN_STANDARD_QPOISSON_RECON=OFF \
            -DPLUGIN_STANDARD_QSRA=OFF \
            -DPLUGIN_STANDARD_QRANSAC_SD=${{ matrix.config.compile_qransac }} \
            -DPLUGIN_STANDARD_QPCL=${{ matrix.config.compile_qpcl }} \
            -DPLUGIN_STANDARD_QCLOUDLAYERS=OFF \
            .

      - name: Build
        run: cmake --build build --parallel

      - name: Install (macOs)
        if: matrix.config.os == 'macos-latest'
        run: sudo cmake --install build

      - name: Install (Windows)
        if: matrix.config.os == 'windows-latest'
        run: cmake --install build

  ubuntu-build:
    name: Ubuntu ${{ matrix.compiler }} SCALAR_DOUBLE=${{ matrix.scalar_double }}
    runs-on: ubuntu-20.04
    if: "!contains(github.event.head_commit.message, '[skip ci]')"

    strategy:
      fail-fast: false
      matrix:
        scalar_double: [ "OFF", "ON" ]
        compiler: ["GCC", "Clang"]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install Dependencies
        run: >
          sudo apt-get update -qq

          sudo apt-get install -qy cmake ninja-build
          libqt5svg5-dev libqt5opengl5-dev qt5-default qttools5-dev qttools5-dev-tools libqt5websockets5-dev
          libtbb-dev
          libavcodec-dev libavformat-dev libavutil-dev libswscale-dev
          libboost-program-options-dev libboost-thread-dev
          libeigen3-dev
          libcgal-dev libcgal-qt5-dev libgdal-dev libpcl-dev
          libdlib-dev libproj-dev libxerces-c-dev xvfb libjsoncpp-dev liblaszip-dev

      - name: Setup GCC
        if: matrix.compiler == 'GCC'
        run: |
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV

      - name: Setup Clang
        if: matrix.compiler == 'Clang'
        run: |
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV

      - name: Configure cmake
        run: >
          mkdir build

          cmake
          -B build
          -S .
          -G Ninja
          -DEIGEN_ROOT_DIR=/usr/include/eigen3
          -DJSON_ROOT_DIR=/usr/include/jsoncpp
          -DDLIB_ROOT=/usr/include
          -DCCCORELIB_SCALAR_DOUBLE=${{ matrix.scalar_double }}
          -DCCCORELIB_USE_TBB=OFF
          -DPLUGIN_EXAMPLE_GL=OFF
          -DPLUGIN_EXAMPLE_IO=OFF
          -DPLUGIN_EXAMPLE_STANDARD=OFF
          -DPLUGIN_GL_QEDL=OFF
          -DPLUGIN_GL_QSSAO=OFF
          -DPLUGIN_IO_QADDITIONAL=OFF
          -DPLUGIN_IO_QCORE=OFF
          -DPLUGIN_IO_QE57=ON
          -DPLUGIN_IO_QPHOTOSCAN=OFF
          -DPLUGIN_IO_QLAS=ON
          -DPLUGIN_IO_QRDB=OFF
          -DPLUGIN_IO_QRDB_FETCH_DEPENDENCY=OFF
          -DPLUGIN_IO_QRDB_INSTALL_DEPENDENCY=OFF
          -DPLUGIN_STANDARD_QANIMATION=OFF
          -DQANIMATION_WITH_FFMPEG_SUPPORT=OFF
          -DPLUGIN_STANDARD_QBROOM=OFF
          -DPLUGIN_STANDARD_QCANUPO=OFF
          -DPLUGIN_STANDARD_QCOMPASS=OFF
          -DPLUGIN_STANDARD_QCSF=OFF
          -DPLUGIN_STANDARD_QFACETS=OFF
          -DPLUGIN_STANDARD_QHOUGH_NORMALS=OFF
          -DPLUGIN_STANDARD_QHPR=OFF
          -DPLUGIN_STANDARD_QM3C2=OFF
          -DPLUGIN_STANDARD_QPCV=OFF
          -DPLUGIN_STANDARD_QPOISSON_RECON=OFF
          -DPLUGIN_STANDARD_QSRA=OFF
          -DPLUGIN_STANDARD_QRANSAC_SD=OFF
          -DPLUGIN_STANDARD_QPCL=OFF
          -DPLUGIN_STANDARD_QCLOUDLAYERS=OFF
          -DBUILD_TESTING=OFF

      - name: Build
        run: cmake --build build --parallel

      - name: Test
        run: xvfb-run ctest --test-dir build

      - name: Install
        run: sudo cmake --install build
